security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    encoders:
        App\Entity\Security\User:
            algorithm: auto

    providers:
        chain_provider:
          chain:
            providers:    [database]
        database:
            entity:
                class: App\Entity\Security\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api_doc:
            pattern:  ^/api/doc
            stateless: true
            anonymous: true

        register-user:
            methods: [POST]
            pattern: ^/api/users
            stateless: true
            anonymous: true

        graphql:
            methods: [GET]
            pattern: ^/api/graphql
            stateless: true
            anonymous: true

        login:
            pattern:  ^/api/login
            stateless: true
            anonymous: true
            provider: database
            json_login:
                check_path:               /api/login_check
                success_handler:          lexik_jwt_authentication.handler.authentication_success
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure
            user_checker: App\Service\Security\UserEnabledChecker

        api:
            pattern: ^/api
            stateless: true
            provider: database
            guard:
                authenticators:
                    - App\Service\Security\TokenAuthenticator



            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/docs, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
